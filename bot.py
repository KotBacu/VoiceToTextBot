import os
import re
import tempfile
import asyncio
from datetime import datetime, timedelta

import whisper
import ffmpeg
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –æ–¥–∏–Ω —Ä–∞–∑
MODEL_SIZE = os.getenv("WHISPER_MODEL", "tiny")
model = whisper.load_model(MODEL_SIZE)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# –ü–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
def parse_time_spec(t: str):
    m = re.match(r"^(\d+)([mh])$", t)
    if m:
        v, unit = int(m.group(1)), m.group(2)
        return timedelta(minutes=v) if unit == "m" else timedelta(hours=v)
    # –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è HH:MM
    now = datetime.now()
    try:
        hh, mm = map(int, t.split(':'))
        target = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if target <= now:
            target += timedelta(days=1)
        return target
    except ValueError:
        return None

# –•–µ–Ω–¥–ª–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
async def cmd_transcribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    reply = msg.reply_to_message
    if not reply or not (reply.voice or reply.audio):
        return await msg.reply_text(
            "‚ö†Ô∏è –ß—Ç–æ–±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /transcribe."
        )
    file_obj = await (reply.voice or reply.audio).get_file()
    with tempfile.TemporaryDirectory() as tmp:
        in_path = os.path.join(tmp, "in.ogg")
        wav_path = os.path.join(tmp, "in.wav")
        await file_obj.download_to_drive(in_path)
        ffmpeg.input(in_path).output(wav_path, ar=16000, ac=1).overwrite_output().run(quiet=True)
        res = model.transcribe(wav_path, language="ru")
        text = res.get("text", "").strip() or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."
    await msg.reply_text(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{text}")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ JobQueue
async def alarm(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(
        chat_id=job.chat_id,
        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{job.data['text']}"
    )

async def remind_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n"
            "–í—Ä–µ–º—è: 10m, 2h –∏–ª–∏ HH:MM"
        )
    spec = context.args[0]
    text = " ".join(context.args[1:])
    when = parse_time_spec(spec)
    if when is None:
        return await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 10m, 2h –∏–ª–∏ HH:MM"
        )
    if isinstance(when, timedelta):
        delay = when.total_seconds()
    else:
        delay = (when - datetime.now()).total_seconds()
    job = context.job_queue.run_once(
        alarm,
        when=delay,
        chat_id=update.effective_chat.id,
        name=f"reminder_{update.effective_user.id}_{datetime.now().timestamp()}",
        data={"text": text}
    )
    run_at = (datetime.now() + timedelta(seconds=delay)).strftime("%Y-%m-%d %H:%M")
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {run_at}\nID: {job.job_id}")

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    jobs = context.job_queue.get_jobs()
    if not jobs:
        return await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    now = datetime.now()
    lines = []
    for job in jobs:
        delta = job.next_run_time - now
        mins = int(delta.total_seconds() // 60)
        lines.append(f"{job.job_id}: —á–µ—Ä–µ–∑ {mins} –º–∏–Ω ‚Üí {job.data['text']}")
    await update.message.reply_text("\n".join(lines))

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel <ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>")
    job_id = context.args[0]
    job = context.job_queue.get_job(job_id)
    if job:
        job.schedule_removal()
        return await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        return await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        "- /transcribe (reply –Ω–∞ voice-note)\n"
        "- /remind <time> <text>\n"
        "- /listreminders\n"
        "- /cancel <ID>"
    )


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    asyncio.get_event_loop().run_until_complete(
        app.bot.set_my_commands([
            BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            BotCommand("transcribe", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            BotCommand("remind", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand("listreminders", "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"),
        ])
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("transcribe", cmd_transcribe))
    app.add_handler(CommandHandler("remind", remind_cmd))
    app.add_handler(CommandHandler("listreminders", list_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    print("–ë–æ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
